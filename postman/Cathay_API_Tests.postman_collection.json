{
	"info": {
		"_postman_id": "cathay-api-tests",
		"name": "Cathay API Tests",
		"description": "完整的API測試集合，包含產品查詢和訊息發送功能測試",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Products API",
			"item": [
				{
					"name": "GET - 基本產品查詢",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Products have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        var product = jsonData.data[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('price');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - 價格範圍篩選 (1-78)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All prices are within range 1-78\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(product) {",
									"            pm.expect(product.price).to.be.at.least(1);",
									"            pm.expect(product.price).to.be.at.most(78);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?between=price,1,78",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "between",
									"value": "price,1,78"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - 排序和分頁",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Products are sorted by name ascending\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length > 1) {",
									"        for (var i = 0; i < jsonData.data.length - 1; i++) {",
									"            pm.expect(jsonData.data[i].name).to.be.at.most(jsonData.data[i+1].name);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort=name,asc&between=price,1,100&page=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "name,asc"
								},
								{
									"key": "between",
									"value": "price,1,100"
								},
								{
									"key": "page",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - 單一產品查詢",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product has all required fields\", function () {",
									"    var product = pm.response.json();",
									"    pm.expect(product).to.have.property('id');",
									"    pm.expect(product).to.have.property('name');",
									"    pm.expect(product).to.have.property('price');",
									"    pm.expect(product).to.have.property('description');",
									"    pm.expect(product).to.have.property('brand');",
									"    pm.expect(product).to.have.property('category');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/01JP2ABXF9J8J0YADSKV8BXH92",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"01JP2ABXF9J8J0YADSKV8BXH92"
							]
						}
					},
					"response": []
				}
			],
			"description": "產品相關API測試"
		},
		{
			"name": "Messages API",
			"item": [
				{
					"name": "POST - 發送有效訊息",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test User\",\n  \"subject\": \"API Test\",\n  \"message\": \"This is a test message for API testing.\",\n  \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - 無效資料測試",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 422\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error message is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"subject\": \"\",\n  \"message\": \"\",\n  \"email\": \"invalid-email\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				}
			],
			"description": "訊息相關API測試"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.practicesoftwaretesting.com",
			"type": "string"
		}
	]
} 